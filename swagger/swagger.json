{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/airad/": {
            "get": {
                "tags": [
                    "airad"
                ],
                "description": "get AirAd",
                "operationId": "AirAdController.GetAll",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.AirAd"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "airad"
                ],
                "description": "create AirAd",
                "operationId": "AirAdController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for AirAd content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AirAd"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.AirAd"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/airad/{id}": {
            "get": {
                "tags": [
                    "airad"
                ],
                "description": "get AirAd by id",
                "operationId": "AirAdController.GetOne",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for static block",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.AirAd"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "airad"
                ],
                "description": "update the AirAd",
                "operationId": "AirAdController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for AirAd content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AirAd"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.AirAd"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "airad"
                ],
                "description": "delete the AirAd",
                "operationId": "AirAdController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/device/": {
            "get": {
                "tags": [
                    "device"
                ],
                "description": "get Device",
                "operationId": "DeviceController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "device"
                ],
                "description": "create Device",
                "operationId": "DeviceController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Device content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Device"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/device/{id}": {
            "get": {
                "tags": [
                    "device"
                ],
                "description": "get Device by id",
                "operationId": "DeviceController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "device"
                ],
                "description": "update the Device",
                "operationId": "DeviceController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Device content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "post": {
                "tags": [
                    "device"
                ],
                "description": "Get All Devices by User Id",
                "operationId": "DeviceController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "description": "true",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "path",
                        "name": "limit",
                        "description": "true",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "path",
                        "name": "offset",
                        "description": "true",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "path",
                        "name": "fields",
                        "description": "true",
                        "schema": {
                            "$ref": "#/definitions/String"
                        }
                    },
                    {
                        "in": "path",
                        "name": "token",
                        "description": "true",
                        "schema": {
                            "$ref": "#/definitions/String"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            },
            "delete": {
                "tags": [
                    "device"
                ],
                "description": "delete the Device",
                "operationId": "DeviceController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/life/create": {
            "post": {
                "tags": [
                    "life"
                ],
                "description": "create sentence",
                "operationId": "SentenceController.Create",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Sentence"
                        }
                    }
                }
            }
        },
        "/life/getOneByRand": {
            "get": {
                "tags": [
                    "life"
                ],
                "description": "get one Sentence by rand",
                "operationId": "SentenceController.GetOneByRand",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Sentence"
                        }
                    }
                }
            }
        },
        "/life/list": {
            "post": {
                "tags": [
                    "life"
                ],
                "description": "get all Sentence",
                "operationId": "SentenceController.ListSentence",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/base.BaseListResponseVO"
                        }
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get all Users",
                "operationId": "UserController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "user"
                ],
                "description": "create users",
                "operationId": "UserController.CreateUser",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.User.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user/auth": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "测试错误码",
                "operationId": "UserController.认证测试",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/base.BaseResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized"
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "Logs user into the system",
                "operationId": "UserController.Login",
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "description": "The username for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password for login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} login success"
                    },
                    "403": {
                        "description": "user not exist"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Logs out current logged in user session",
                "operationId": "UserController.logout",
                "responses": {
                    "200": {
                        "description": "{string} logout success"
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get User by id",
                "operationId": "UserController.GetOne",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for static block",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.AirAd"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            }
        },
        "/user/{uid}": {
            "put": {
                "tags": [
                    "user"
                ],
                "description": "update the user",
                "operationId": "UserController.Update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "description": "delete the user",
                "operationId": "UserController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "uid is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "2188.0xc000320180.false": {
            "title": "false",
            "type": "object"
        },
        "4251.0xc000320480.false": {
            "title": "false",
            "type": "object"
        },
        "String": {
            "title": "String",
            "type": "object"
        },
        "base.BaseListResponseVO": {
            "title": "BaseListResponseVO",
            "type": "object",
            "properties": {
                "list": {
                    "$ref": "#/definitions/4251.0xc000320480.false"
                },
                "page": {
                    "type": "integer",
                    "format": "int64"
                },
                "size": {
                    "type": "integer",
                    "format": "int64"
                },
                "total": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "base.BaseResponse": {
            "title": "BaseResponse",
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/2188.0xc000320180.false"
                },
                "err_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "err_msg": {
                    "type": "string"
                },
                "status": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "base.BaseVO": {
            "title": "BaseVO",
            "type": "object"
        },
        "models.AirAd": {
            "title": "AirAd",
            "type": "object",
            "properties": {
                "aqi_quality": {
                    "type": "string"
                },
                "co": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer",
                    "format": "int64"
                },
                "device_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "humidity": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "nh3": {
                    "type": "string"
                },
                "o3": {
                    "type": "string"
                },
                "pm10": {
                    "type": "string"
                },
                "pm25": {
                    "type": "string"
                },
                "so2": {
                    "type": "string"
                },
                "suggest": {
                    "type": "string"
                },
                "temperature": {
                    "type": "string"
                }
            }
        },
        "models.Device": {
            "title": "Device",
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "airad_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "integer",
                    "format": "int64"
                },
                "device_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "latitude": {
                    "type": "string"
                },
                "longitude": {
                    "type": "string"
                },
                "status": {
                    "type": "integer",
                    "format": "int64"
                },
                "updated_at": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Mqtt": {
            "title": "Mqtt",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "mqtt_option_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "qos": {
                    "type": "string",
                    "format": "byte"
                },
                "retain": {
                    "type": "boolean"
                },
                "topic_filter": {
                    "type": "string"
                },
                "topic_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.MqttOption": {
            "title": "MqttOption",
            "type": "object",
            "properties": {
                "clean_session": {
                    "type": "boolean"
                },
                "client_id": {
                    "type": "string"
                },
                "conn_ack_timeout": {
                    "$ref": "#/definitions/time.Duration"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "keep_alive": {
                    "type": "integer",
                    "format": "int32"
                },
                "password": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "will_message": {
                    "type": "string"
                },
                "will_qos": {
                    "type": "boolean"
                },
                "will_retain": {
                    "type": "boolean"
                },
                "will_topic": {
                    "type": "string"
                }
            }
        },
        "models.Object": {
            "title": "Object",
            "type": "object",
            "properties": {
                "ObjectId": {
                    "type": "string"
                },
                "PlayerName": {
                    "type": "string"
                },
                "Score": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Sentence": {
            "title": "Sentence",
            "type": "object"
        },
        "models.User": {
            "title": "User",
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "age": {
                    "type": "integer",
                    "format": "int64"
                },
                "avatar": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer",
                    "format": "int64"
                },
                "deleted_at": {
                    "type": "integer",
                    "format": "int64"
                },
                "device_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "integer",
                    "format": "int64"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "last_login": {
                    "type": "integer",
                    "format": "int64"
                },
                "password": {
                    "type": "string"
                },
                "salt": {
                    "type": "string"
                },
                "status": {
                    "type": "integer",
                    "format": "int64"
                },
                "token": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer",
                    "format": "int64"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "time.Duration": {
            "title": "Duration",
            "type": "object"
        }
    },
    "tags": [
        {
            "name": "user",
            "description": "Operations about Users\n"
        },
        {
            "name": "airad",
            "description": "AirAdController operations for AirAd\n"
        },
        {
            "name": "device",
            "description": " DeviceController operations for Device\n"
        }
    ]
}